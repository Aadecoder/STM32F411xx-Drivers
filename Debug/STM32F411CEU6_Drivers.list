
STM32F411CEU6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009d4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b6c  08000b6c  00001b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b78  08000b78  00001b88  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000b78  08000b78  00001b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b80  08000b88  00001b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b80  08000b80  00001b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b84  08000b84  00001b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b88  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b88  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001557  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c2  00000000  00000000  0000310f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  000035d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000127  00000000  00000000  00003770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000235a  00000000  00000000  00003897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a9c  00000000  00000000  00005bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000097cc  00000000  00000000  0000768d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00010e59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f4  00000000  00000000  00010e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00011490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000b54 	.word	0x08000b54

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000b54 	.word	0x08000b54

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <delay>:
#include "stm32f411.h"
#include <string.h>

void delay(void){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
		for(uint32_t i = 0; i<500000/2; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	@ (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	0003d08f 	.word	0x0003d08f

08000214 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
		GPIO_Handle_t GPIOBtn;
		//this is the button GPIO configuration
		GPIOBtn.pGPIOx = GPIOA;
 800021a:	4b0b      	ldr	r3, [pc, #44]	@ (8000248 <GPIO_ButtonInit+0x34>)
 800021c:	603b      	str	r3, [r7, #0]
		GPIOBtn.GPIO_PinConfig->GPIO_PinNumber = GPIO_PIN_NO_0;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2200      	movs	r2, #0
 8000222:	701a      	strb	r2, [r3, #0]
		GPIOBtn.GPIO_PinConfig->GPIO_PinMode = GPIO_MODE_IN;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2200      	movs	r2, #0
 8000228:	705a      	strb	r2, [r3, #1]
		GPIOBtn.GPIO_PinConfig->GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2202      	movs	r2, #2
 800022e:	709a      	strb	r2, [r3, #2]
		GPIOBtn.GPIO_PinConfig->GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2200      	movs	r2, #0
 8000234:	70da      	strb	r2, [r3, #3]

		GPIO_Init(&GPIOBtn);
 8000236:	463b      	mov	r3, r7
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f963 	bl	8000504 <GPIO_Init>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40020000 	.word	0x40020000

0800024c <SPI2_GPIOInits>:
void SPI2_GPIOInits(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
		GPIO_Handle_t SPIPins;
		SPIPins.pGPIOx = GPIOB;
 8000252:	4b18      	ldr	r3, [pc, #96]	@ (80002b4 <SPI2_GPIOInits+0x68>)
 8000254:	603b      	str	r3, [r7, #0]
		SPIPins.GPIO_PinConfig->GPIO_PinMode = GPIO_MODE_ALTFN;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2202      	movs	r2, #2
 800025a:	705a      	strb	r2, [r3, #1]
		SPIPins.GPIO_PinConfig->GPIO_PinAltFunMode = 5;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2205      	movs	r2, #5
 8000260:	715a      	strb	r2, [r3, #5]
		SPIPins.GPIO_PinConfig->GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2200      	movs	r2, #0
 8000266:	711a      	strb	r2, [r3, #4]
		SPIPins.GPIO_PinConfig->GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2200      	movs	r2, #0
 800026c:	70da      	strb	r2, [r3, #3]
		SPIPins.GPIO_PinConfig->GPIO_PinSpeed = GPIO_SPEED_FAST;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2202      	movs	r2, #2
 8000272:	709a      	strb	r2, [r3, #2]

		// SCLK
		SPIPins.GPIO_PinConfig->GPIO_PinNumber = GPIO_PIN_NO_13;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	220d      	movs	r2, #13
 8000278:	701a      	strb	r2, [r3, #0]
		GPIO_Init(&SPIPins);
 800027a:	463b      	mov	r3, r7
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f941 	bl	8000504 <GPIO_Init>

		// MOSI
		SPIPins.GPIO_PinConfig->GPIO_PinNumber = GPIO_PIN_NO_15;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	220f      	movs	r2, #15
 8000286:	701a      	strb	r2, [r3, #0]
		GPIO_Init(&SPIPins);
 8000288:	463b      	mov	r3, r7
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f93a 	bl	8000504 <GPIO_Init>

		// MISO but we don't need these for this question
		SPIPins.GPIO_PinConfig->GPIO_PinNumber = GPIO_PIN_NO_14;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	220e      	movs	r2, #14
 8000294:	701a      	strb	r2, [r3, #0]
		GPIO_Init(&SPIPins);
 8000296:	463b      	mov	r3, r7
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f933 	bl	8000504 <GPIO_Init>

		// NSS
		SPIPins.GPIO_PinConfig->GPIO_PinNumber = GPIO_PIN_NO_12;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	220c      	movs	r2, #12
 80002a2:	701a      	strb	r2, [r3, #0]
		GPIO_Init(&SPIPins);
 80002a4:	463b      	mov	r3, r7
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 f92c 	bl	8000504 <GPIO_Init>
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40020400 	.word	0x40020400

080002b8 <SPI2_Inits>:
void SPI2_Inits(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
		SPI_Handle_t SPI2handle;
		SPI2handle.pSPIx = SPI2;
 80002be:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <SPI2_Inits+0x38>)
 80002c0:	603b      	str	r3, [r7, #0]
		SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002c2:	2301      	movs	r3, #1
 80002c4:	717b      	strb	r3, [r7, #5]
		SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002c6:	2301      	movs	r3, #1
 80002c8:	713b      	strb	r3, [r7, #4]
		SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 80002ca:	2302      	movs	r3, #2
 80002cc:	71bb      	strb	r3, [r7, #6]
		SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002ce:	2300      	movs	r3, #0
 80002d0:	71fb      	strb	r3, [r7, #7]
		SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002d2:	2300      	movs	r3, #0
 80002d4:	727b      	strb	r3, [r7, #9]
		SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002d6:	2300      	movs	r3, #0
 80002d8:	723b      	strb	r3, [r7, #8]
		SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Hardware slave management enabled for NSS pin
 80002da:	2300      	movs	r3, #0
 80002dc:	72bb      	strb	r3, [r7, #10]

		SPI_Init(&SPI2handle);
 80002de:	463b      	mov	r3, r7
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fb3d 	bl	8000960 <SPI_Init>
}
 80002e6:	bf00      	nop
 80002e8:	3720      	adds	r7, #32
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40003800 	.word	0x40003800

080002f4 <main>:
int main(){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
		char user_data[] = "Hello World";
 80002fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000364 <main+0x70>)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000300:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		GPIO_ButtonInit();
 8000304:	f7ff ff86 	bl	8000214 <GPIO_ButtonInit>

		// This function is used to initialize the GPIO pins to behave as SPI2 Pins
		SPI2_GPIOInits();
 8000308:	f7ff ffa0 	bl	800024c <SPI2_GPIOInits>

		SPI2_Inits();
 800030c:	f7ff ffd4 	bl	80002b8 <SPI2_Inits>

		// Setting SSOE Peripheral for enabling slave select output
		SPI_SSOEConfig(SPI2, ENABLE);
 8000310:	2101      	movs	r1, #1
 8000312:	4815      	ldr	r0, [pc, #84]	@ (8000368 <main+0x74>)
 8000314:	f000 fbaa 	bl	8000a6c <SPI_SSOEConfig>

		// Implement the button functionality
		while(1){
				// Wait till the button is pressed
				while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000318:	bf00      	nop
 800031a:	2100      	movs	r1, #0
 800031c:	4813      	ldr	r0, [pc, #76]	@ (800036c <main+0x78>)
 800031e:	f000 fa99 	bl	8000854 <GPIO_ReadFromInputPin>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f8      	beq.n	800031a <main+0x26>

				// Avoid button de-bouncing related issues
				delay();
 8000328:	f7ff ff5e 	bl	80001e8 <delay>

				// Enable the SPI2 Peripheral
				SPI_PeripheralControl(SPI2, ENABLE);
 800032c:	2101      	movs	r1, #1
 800032e:	480e      	ldr	r0, [pc, #56]	@ (8000368 <main+0x74>)
 8000330:	f000 fb80 	bl	8000a34 <SPI_PeripheralControl>

				// Send Data
				SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ff4e 	bl	80001d8 <strlen>
 800033c:	4602      	mov	r2, r0
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4619      	mov	r1, r3
 8000342:	4809      	ldr	r0, [pc, #36]	@ (8000368 <main+0x74>)
 8000344:	f000 fbae 	bl	8000aa4 <SPI_SendData>

				// Lets confirm that the SPI is not busy before disabling the peripheral
				while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000348:	bf00      	nop
 800034a:	2180      	movs	r1, #128	@ 0x80
 800034c:	4806      	ldr	r0, [pc, #24]	@ (8000368 <main+0x74>)
 800034e:	f000 fb5d 	bl	8000a0c <SPI_GetFlagStatus>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d1f8      	bne.n	800034a <main+0x56>
				// Disable the SPI2 Peripheral
				SPI_PeripheralControl(SPI2, DISABLE);
 8000358:	2100      	movs	r1, #0
 800035a:	4803      	ldr	r0, [pc, #12]	@ (8000368 <main+0x74>)
 800035c:	f000 fb6a 	bl	8000a34 <SPI_PeripheralControl>
				while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000360:	e7da      	b.n	8000318 <main+0x24>
 8000362:	bf00      	nop
 8000364:	08000b6c 	.word	0x08000b6c
 8000368:	40003800 	.word	0x40003800
 800036c:	40020000 	.word	0x40020000

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	@ (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000374:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	@ (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	@ (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	@ (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	@ (80003bc <LoopForever+0x16>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 fbb5 	bl	8000b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ffa7 	bl	80002f4 <main>

080003a6 <LoopForever>:

LoopForever:
  b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b4:	08000b88 	.word	0x08000b88
  ldr r2, =_sbss
 80003b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003bc:	2000001c 	.word	0x2000001c

080003c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC_IRQHandler>
	...

080003c4 <GPIO_PeriClockControl>:

* @return            -  none

* @Note              - none
********************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 80003d0:	78fb      	ldrb	r3, [r7, #3]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d141      	bne.n	800045a <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){GPIOA_PCLK_EN();}
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a43      	ldr	r2, [pc, #268]	@ (80004e8 <GPIO_PeriClockControl+0x124>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x28>
 80003de:	4b43      	ldr	r3, [pc, #268]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e2:	4a42      	ldr	r2, [pc, #264]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOC){GPIOC_PCLK_DI();}
		else if(pGPIOx == GPIOD){GPIOD_PCLK_DI();}
		else if(pGPIOx == GPIOE){GPIOE_PCLK_DI();}
		else if(pGPIOx == GPIOH){GPIOH_PCLK_DI();}
	}
}
 80003ea:	e077      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB){GPIOB_PCLK_EN();}
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a40      	ldr	r2, [pc, #256]	@ (80004f0 <GPIO_PeriClockControl+0x12c>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0x3e>
 80003f4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f8:	4a3c      	ldr	r2, [pc, #240]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80003fa:	f043 0302 	orr.w	r3, r3, #2
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000400:	e06c      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC){GPIOC_PCLK_EN();}
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a3b      	ldr	r2, [pc, #236]	@ (80004f4 <GPIO_PeriClockControl+0x130>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0x54>
 800040a:	4b38      	ldr	r3, [pc, #224]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040e:	4a37      	ldr	r2, [pc, #220]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000410:	f043 0304 	orr.w	r3, r3, #4
 8000414:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000416:	e061      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD){GPIOD_PCLK_EN();}
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a37      	ldr	r2, [pc, #220]	@ (80004f8 <GPIO_PeriClockControl+0x134>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0x6a>
 8000420:	4b32      	ldr	r3, [pc, #200]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000424:	4a31      	ldr	r2, [pc, #196]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042c:	e056      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE){GPIOE_PCLK_EN();}
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a32      	ldr	r2, [pc, #200]	@ (80004fc <GPIO_PeriClockControl+0x138>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0x80>
 8000436:	4b2d      	ldr	r3, [pc, #180]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043a:	4a2c      	ldr	r2, [pc, #176]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000442:	e04b      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH){GPIOH_PCLK_EN();}
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a2e      	ldr	r2, [pc, #184]	@ (8000500 <GPIO_PeriClockControl+0x13c>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d147      	bne.n	80004dc <GPIO_PeriClockControl+0x118>
 800044c:	4b27      	ldr	r3, [pc, #156]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000450:	4a26      	ldr	r2, [pc, #152]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000456:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000458:	e040      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){GPIOA_PCLK_DI();}
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a22      	ldr	r2, [pc, #136]	@ (80004e8 <GPIO_PeriClockControl+0x124>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0xac>
 8000462:	4b22      	ldr	r3, [pc, #136]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000466:	4a21      	ldr	r2, [pc, #132]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046e:	e035      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB){GPIOB_PCLK_DI();}
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a1f      	ldr	r2, [pc, #124]	@ (80004f0 <GPIO_PeriClockControl+0x12c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PeriClockControl+0xc2>
 8000478:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047c:	4a1b      	ldr	r2, [pc, #108]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 800047e:	f043 0302 	orr.w	r3, r3, #2
 8000482:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000484:	e02a      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC){GPIOC_PCLK_DI();}
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a1a      	ldr	r2, [pc, #104]	@ (80004f4 <GPIO_PeriClockControl+0x130>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0xd8>
 800048e:	4b17      	ldr	r3, [pc, #92]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000492:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 8000494:	f043 0304 	orr.w	r3, r3, #4
 8000498:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049a:	e01f      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD){GPIOD_PCLK_DI();}
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a16      	ldr	r2, [pc, #88]	@ (80004f8 <GPIO_PeriClockControl+0x134>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_PeriClockControl+0xee>
 80004a4:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a8:	4a10      	ldr	r2, [pc, #64]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b0:	e014      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE){GPIOE_PCLK_DI();}
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a11      	ldr	r2, [pc, #68]	@ (80004fc <GPIO_PeriClockControl+0x138>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_PeriClockControl+0x104>
 80004ba:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004be:	4a0b      	ldr	r2, [pc, #44]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004c0:	f043 0310 	orr.w	r3, r3, #16
 80004c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c6:	e009      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH){GPIOH_PCLK_DI();}
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000500 <GPIO_PeriClockControl+0x13c>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d105      	bne.n	80004dc <GPIO_PeriClockControl+0x118>
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d4:	4a05      	ldr	r2, [pc, #20]	@ (80004ec <GPIO_PeriClockControl+0x128>)
 80004d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40020000 	.word	0x40020000
 80004ec:	40023800 	.word	0x40023800
 80004f0:	40020400 	.word	0x40020400
 80004f4:	40020800 	.word	0x40020800
 80004f8:	40020c00 	.word	0x40020c00
 80004fc:	40021000 	.word	0x40021000
 8000500:	40021c00 	.word	0x40021c00

08000504 <GPIO_Init>:
* @return              -  none

* @Note                - none
********************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2101      	movs	r1, #1
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff56 	bl	80003c4 <GPIO_PeriClockControl>
	uint8_t temp=0;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]

	// 1. Configure the mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig->GPIO_PinMode <= GPIO_MODE_ANALOG){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	2b03      	cmp	r3, #3
 8000524:	d822      	bhi.n	800056c <GPIO_Init+0x68>
		// Non Interrupt
		temp = pGPIOHandle->GPIO_PinConfig->GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	785b      	ldrb	r3, [r3, #1]
 800052c:	461a      	mov	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4619      	mov	r1, r3
 800054a:	2303      	movs	r3, #3
 800054c:	408b      	lsls	r3, r1
 800054e:	43db      	mvns	r3, r3
 8000550:	4619      	mov	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	400a      	ands	r2, r1
 8000558:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6819      	ldr	r1, [r3, #0]
 8000560:	7bfa      	ldrb	r2, [r7, #15]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	430a      	orrs	r2, r1
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	e0c2      	b.n	80006f2 <GPIO_Init+0x1ee>
	}else {
		// Interrupt
		if(pGPIOHandle->GPIO_PinConfig->GPIO_PinMode == GPIO_MODE_IT_FT){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	785b      	ldrb	r3, [r3, #1]
 8000572:	2b04      	cmp	r3, #4
 8000574:	d119      	bne.n	80005aa <GPIO_Init+0xa6>
			// 1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 8000576:	4b45      	ldr	r3, [pc, #276]	@ (800068c <GPIO_Init+0x188>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	6852      	ldr	r2, [r2, #4]
 800057e:	7812      	ldrb	r2, [r2, #0]
 8000580:	4611      	mov	r1, r2
 8000582:	2201      	movs	r2, #1
 8000584:	408a      	lsls	r2, r1
 8000586:	4611      	mov	r1, r2
 8000588:	4a40      	ldr	r2, [pc, #256]	@ (800068c <GPIO_Init+0x188>)
 800058a:	430b      	orrs	r3, r1
 800058c:	60d3      	str	r3, [r2, #12]
			//Clearing the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 800058e:	4b3f      	ldr	r3, [pc, #252]	@ (800068c <GPIO_Init+0x188>)
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	6852      	ldr	r2, [r2, #4]
 8000596:	7812      	ldrb	r2, [r2, #0]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	43d2      	mvns	r2, r2
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a3a      	ldr	r2, [pc, #232]	@ (800068c <GPIO_Init+0x188>)
 80005a4:	400b      	ands	r3, r1
 80005a6:	6093      	str	r3, [r2, #8]
 80005a8:	e03b      	b.n	8000622 <GPIO_Init+0x11e>

		}else if(pGPIOHandle->GPIO_PinConfig->GPIO_PinMode == GPIO_MODE_IT_RT){
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	2b05      	cmp	r3, #5
 80005b2:	d119      	bne.n	80005e8 <GPIO_Init+0xe4>
			//1. Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 80005b4:	4b35      	ldr	r3, [pc, #212]	@ (800068c <GPIO_Init+0x188>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	6852      	ldr	r2, [r2, #4]
 80005bc:	7812      	ldrb	r2, [r2, #0]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a31      	ldr	r2, [pc, #196]	@ (800068c <GPIO_Init+0x188>)
 80005c8:	430b      	orrs	r3, r1
 80005ca:	6093      	str	r3, [r2, #8]
			//Clearing the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 80005cc:	4b2f      	ldr	r3, [pc, #188]	@ (800068c <GPIO_Init+0x188>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	6852      	ldr	r2, [r2, #4]
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	4611      	mov	r1, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	408a      	lsls	r2, r1
 80005dc:	43d2      	mvns	r2, r2
 80005de:	4611      	mov	r1, r2
 80005e0:	4a2a      	ldr	r2, [pc, #168]	@ (800068c <GPIO_Init+0x188>)
 80005e2:	400b      	ands	r3, r1
 80005e4:	60d3      	str	r3, [r2, #12]
 80005e6:	e01c      	b.n	8000622 <GPIO_Init+0x11e>

		}else if(pGPIOHandle->GPIO_PinConfig->GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	2b06      	cmp	r3, #6
 80005f0:	d117      	bne.n	8000622 <GPIO_Init+0x11e>
			//1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 80005f2:	4b26      	ldr	r3, [pc, #152]	@ (800068c <GPIO_Init+0x188>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	6852      	ldr	r2, [r2, #4]
 80005fa:	7812      	ldrb	r2, [r2, #0]
 80005fc:	4611      	mov	r1, r2
 80005fe:	2201      	movs	r2, #1
 8000600:	408a      	lsls	r2, r1
 8000602:	4611      	mov	r1, r2
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <GPIO_Init+0x188>)
 8000606:	430b      	orrs	r3, r1
 8000608:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 800060a:	4b20      	ldr	r3, [pc, #128]	@ (800068c <GPIO_Init+0x188>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	6852      	ldr	r2, [r2, #4]
 8000612:	7812      	ldrb	r2, [r2, #0]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	4611      	mov	r1, r2
 800061c:	4a1b      	ldr	r2, [pc, #108]	@ (800068c <GPIO_Init+0x188>)
 800061e:	430b      	orrs	r3, r1
 8000620:	6093      	str	r3, [r2, #8]
		}
		// 2. Configure the GPIO Port Selection
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber / 4;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	089b      	lsrs	r3, r3, #2
 800062a:	73bb      	strb	r3, [r7, #14]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber % 4;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	f003 0303 	and.w	r3, r3, #3
 8000636:	737b      	strb	r3, [r7, #13]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <GPIO_Init+0x18c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d032      	beq.n	80006a8 <GPIO_Init+0x1a4>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <GPIO_Init+0x190>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d01d      	beq.n	8000688 <GPIO_Init+0x184>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a11      	ldr	r2, [pc, #68]	@ (8000698 <GPIO_Init+0x194>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d016      	beq.n	8000684 <GPIO_Init+0x180>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a10      	ldr	r2, [pc, #64]	@ (800069c <GPIO_Init+0x198>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d00f      	beq.n	8000680 <GPIO_Init+0x17c>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0e      	ldr	r2, [pc, #56]	@ (80006a0 <GPIO_Init+0x19c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d008      	beq.n	800067c <GPIO_Init+0x178>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <GPIO_Init+0x1a0>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d101      	bne.n	8000678 <GPIO_Init+0x174>
 8000674:	2307      	movs	r3, #7
 8000676:	e018      	b.n	80006aa <GPIO_Init+0x1a6>
 8000678:	2300      	movs	r3, #0
 800067a:	e016      	b.n	80006aa <GPIO_Init+0x1a6>
 800067c:	2304      	movs	r3, #4
 800067e:	e014      	b.n	80006aa <GPIO_Init+0x1a6>
 8000680:	2303      	movs	r3, #3
 8000682:	e012      	b.n	80006aa <GPIO_Init+0x1a6>
 8000684:	2302      	movs	r3, #2
 8000686:	e010      	b.n	80006aa <GPIO_Init+0x1a6>
 8000688:	2301      	movs	r3, #1
 800068a:	e00e      	b.n	80006aa <GPIO_Init+0x1a6>
 800068c:	40013c00 	.word	0x40013c00
 8000690:	40020000 	.word	0x40020000
 8000694:	40020400 	.word	0x40020400
 8000698:	40020800 	.word	0x40020800
 800069c:	40020c00 	.word	0x40020c00
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40021c00 	.word	0x40021c00
 80006a8:	2300      	movs	r3, #0
 80006aa:	733b      	strb	r3, [r7, #12]
		SYSCFG_PCLK_EN();
 80006ac:	4b66      	ldr	r3, [pc, #408]	@ (8000848 <GPIO_Init+0x344>)
 80006ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b0:	4a65      	ldr	r2, [pc, #404]	@ (8000848 <GPIO_Init+0x344>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] |= (portcode << (4 * temp2));
 80006b8:	4a64      	ldr	r2, [pc, #400]	@ (800084c <GPIO_Init+0x348>)
 80006ba:	7bbb      	ldrb	r3, [r7, #14]
 80006bc:	3302      	adds	r3, #2
 80006be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006c2:	7b39      	ldrb	r1, [r7, #12]
 80006c4:	7b7b      	ldrb	r3, [r7, #13]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	fa01 f303 	lsl.w	r3, r1, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	495f      	ldr	r1, [pc, #380]	@ (800084c <GPIO_Init+0x348>)
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	4302      	orrs	r2, r0
 80006d4:	3302      	adds	r3, #2
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI Interrupt Delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 80006da:	4b5d      	ldr	r3, [pc, #372]	@ (8000850 <GPIO_Init+0x34c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	6852      	ldr	r2, [r2, #4]
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a58      	ldr	r2, [pc, #352]	@ (8000850 <GPIO_Init+0x34c>)
 80006ee:	430b      	orrs	r3, r1
 80006f0:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]
	// 2. Configure the Output Type
	temp = pGPIOHandle->GPIO_PinConfig->GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	791b      	ldrb	r3, [r3, #4]
 80006fc:	461a      	mov	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	73fb      	strb	r3, [r7, #15]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0X1 << pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	2301      	movs	r3, #1
 800071a:	408b      	lsls	r3, r1
 800071c:	43db      	mvns	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	400a      	ands	r2, r1
 8000726:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	6859      	ldr	r1, [r3, #4]
 800072e:	7bfa      	ldrb	r2, [r7, #15]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	430a      	orrs	r2, r1
 8000736:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	73fb      	strb	r3, [r7, #15]
	// 3. Configure the Output Speed
	temp = pGPIOHandle->GPIO_PinConfig->GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	789b      	ldrb	r3, [r3, #2]
 8000742:	461a      	mov	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	73fb      	strb	r3, [r7, #15]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	689a      	ldr	r2, [r3, #8]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4619      	mov	r1, r3
 8000760:	2303      	movs	r3, #3
 8000762:	408b      	lsls	r3, r1
 8000764:	43db      	mvns	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	400a      	ands	r2, r1
 800076e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6899      	ldr	r1, [r3, #8]
 8000776:	7bfa      	ldrb	r2, [r7, #15]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	430a      	orrs	r2, r1
 800077e:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
	// 4. Configure the Pull up / Pull Down Resistors
	temp = pGPIOHandle->GPIO_PinConfig->GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	78db      	ldrb	r3, [r3, #3]
 800078a:	461a      	mov	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	73fb      	strb	r3, [r7, #15]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68da      	ldr	r2, [r3, #12]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	2303      	movs	r3, #3
 80007aa:	408b      	lsls	r3, r1
 80007ac:	43db      	mvns	r3, r3
 80007ae:	4619      	mov	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	400a      	ands	r2, r1
 80007b6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	68d9      	ldr	r1, [r3, #12]
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	430a      	orrs	r2, r1
 80007c6:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]
	// 5. Configure the Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig->GPIO_PinMode == GPIO_MODE_ALTFN){
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	785b      	ldrb	r3, [r3, #1]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d134      	bne.n	8000840 <GPIO_Init+0x33c>
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber / 4;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	089b      	lsrs	r3, r3, #2
 80007de:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig->GPIO_PinNumber % 4;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	f003 0303 	and.w	r3, r3, #3
 80007ea:	72bb      	strb	r3, [r7, #10]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	7afa      	ldrb	r2, [r7, #11]
 80007f2:	3208      	adds	r2, #8
 80007f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007f8:	7abb      	ldrb	r3, [r7, #10]
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	220f      	movs	r2, #15
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	7afa      	ldrb	r2, [r7, #11]
 800080c:	4001      	ands	r1, r0
 800080e:	3208      	adds	r2, #8
 8000810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig->GPIO_PinAltFunMode << (4 * temp2));
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	7afa      	ldrb	r2, [r7, #11]
 800081a:	3208      	adds	r2, #8
 800081c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	795b      	ldrb	r3, [r3, #5]
 8000826:	461a      	mov	r2, r3
 8000828:	7abb      	ldrb	r3, [r7, #10]
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	4618      	mov	r0, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	7afa      	ldrb	r2, [r7, #11]
 8000838:	4301      	orrs	r1, r0
 800083a:	3208      	adds	r2, #8
 800083c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40013800 	.word	0x40013800
 8000850:	40013c00 	.word	0x40013c00

08000854 <GPIO_ReadFromInputPin>:

* @return            - either 0 or 1

* @Note              - Read the corresponding bit position in the input data register
********************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)(pGPIOx->IDR >> (PinNumber) & 0x00000001);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	691a      	ldr	r2, [r3, #16]
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	fa22 f303 	lsr.w	r3, r2, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
	return value;
 8000872:	7bfb      	ldrb	r3, [r7, #15]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SPI_PeriClockControl>:
* @return            -  none

* @Note              - none
********************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
		if(EnorDi == ENABLE){
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d12b      	bne.n	80008ea <SPI_PeriClockControl+0x6a>
				if(pSPIx == SPI1){ SPI1_PCLK_EN();}
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a2d      	ldr	r2, [pc, #180]	@ (800094c <SPI_PeriClockControl+0xcc>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d106      	bne.n	80008a8 <SPI_PeriClockControl+0x28>
 800089a:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	4a2c      	ldr	r2, [pc, #176]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 80008a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008a4:	6453      	str	r3, [r2, #68]	@ 0x44
				if(pSPIx == SPI1){ SPI1_PCLK_DI();}
				else if(pSPIx == SPI2){ SPI2_PCLK_DI();}
				else if(pSPIx == SPI3){ SPI3_PCLK_DI();}
				else if(pSPIx == SPI4){ SPI4_PCLK_DI();}
		}
}
 80008a6:	e04b      	b.n	8000940 <SPI_PeriClockControl+0xc0>
				else if(pSPIx == SPI2){ SPI2_PCLK_EN();}
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a2a      	ldr	r2, [pc, #168]	@ (8000954 <SPI_PeriClockControl+0xd4>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d106      	bne.n	80008be <SPI_PeriClockControl+0x3e>
 80008b0:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	4a26      	ldr	r2, [pc, #152]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008bc:	e040      	b.n	8000940 <SPI_PeriClockControl+0xc0>
				else if(pSPIx == SPI3){ SPI3_PCLK_EN();}
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a25      	ldr	r2, [pc, #148]	@ (8000958 <SPI_PeriClockControl+0xd8>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d106      	bne.n	80008d4 <SPI_PeriClockControl+0x54>
 80008c6:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a21      	ldr	r2, [pc, #132]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 80008cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008d2:	e035      	b.n	8000940 <SPI_PeriClockControl+0xc0>
				else if(pSPIx == SPI4){ SPI4_PCLK_EN();}
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a21      	ldr	r2, [pc, #132]	@ (800095c <SPI_PeriClockControl+0xdc>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d131      	bne.n	8000940 <SPI_PeriClockControl+0xc0>
 80008dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 80008de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 80008e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008e6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008e8:	e02a      	b.n	8000940 <SPI_PeriClockControl+0xc0>
				if(pSPIx == SPI1){ SPI1_PCLK_DI();}
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a17      	ldr	r2, [pc, #92]	@ (800094c <SPI_PeriClockControl+0xcc>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d106      	bne.n	8000900 <SPI_PeriClockControl+0x80>
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	4a16      	ldr	r2, [pc, #88]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 80008f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008fc:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008fe:	e01f      	b.n	8000940 <SPI_PeriClockControl+0xc0>
				else if(pSPIx == SPI2){ SPI2_PCLK_DI();}
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a14      	ldr	r2, [pc, #80]	@ (8000954 <SPI_PeriClockControl+0xd4>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d106      	bne.n	8000916 <SPI_PeriClockControl+0x96>
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	4a10      	ldr	r2, [pc, #64]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000912:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000914:	e014      	b.n	8000940 <SPI_PeriClockControl+0xc0>
				else if(pSPIx == SPI3){ SPI3_PCLK_DI();}
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a0f      	ldr	r2, [pc, #60]	@ (8000958 <SPI_PeriClockControl+0xd8>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d106      	bne.n	800092c <SPI_PeriClockControl+0xac>
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 8000924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800092a:	e009      	b.n	8000940 <SPI_PeriClockControl+0xc0>
				else if(pSPIx == SPI4){ SPI4_PCLK_DI();}
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a0b      	ldr	r2, [pc, #44]	@ (800095c <SPI_PeriClockControl+0xdc>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d105      	bne.n	8000940 <SPI_PeriClockControl+0xc0>
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 8000936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000938:	4a05      	ldr	r2, [pc, #20]	@ (8000950 <SPI_PeriClockControl+0xd0>)
 800093a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800093e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	40013000 	.word	0x40013000
 8000950:	40023800 	.word	0x40023800
 8000954:	40003800 	.word	0x40003800
 8000958:	40003c00 	.word	0x40003c00
 800095c:	40013400 	.word	0x40013400

08000960 <SPI_Init>:

* @return              -  none

* @Note                - none
********************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	// Peripheral Clock Control
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff86 	bl	8000880 <SPI_PeriClockControl>

	// Configure the SPI_CR1 Register
	uint32_t tempreg = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
	// 1. Configure the Device Mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]

	// 2. Configure the Bus Config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	795b      	ldrb	r3, [r3, #5]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d104      	bne.n	8000996 <SPI_Init+0x36>
		// BIDI Mode Should be cleared
		tempreg &= ~(1 << 15);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e014      	b.n	80009c0 <SPI_Init+0x60>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	795b      	ldrb	r3, [r3, #5]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d104      	bne.n	80009a8 <SPI_Init+0x48>
		// BIDI Mode Should be set
		tempreg |= (1 << 15);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e00b      	b.n	80009c0 <SPI_Init+0x60>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	795b      	ldrb	r3, [r3, #5]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d107      	bne.n	80009c0 <SPI_Init+0x60>
		// BIDI Mode Should be cleared
		tempreg &= ~(1 << 15);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009b6:	60fb      	str	r3, [r7, #12]
		// RXONLY must be set
		tempreg |= (1 << 10);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009be:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the SCLK Speed
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	799b      	ldrb	r3, [r3, #6]
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

	// 4. Configure the Data Frame Format
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	79db      	ldrb	r3, [r3, #7]
 80009d0:	02db      	lsls	r3, r3, #11
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]

	// 5. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7a1b      	ldrb	r3, [r3, #8]
 80009dc:	461a      	mov	r2, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]

	// 6. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7a5b      	ldrb	r3, [r3, #9]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]

	// 7. Configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << 9;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7a9b      	ldrb	r3, [r3, #10]
 80009f4:	025b      	lsls	r3, r3, #9
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	601a      	str	r2, [r3, #0]
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SPI_GetFlagStatus>:

* @return            - tells if flag is set or reset

* @Note              - none
********************************************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & FlagName){
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SPI_PeripheralControl>:

* @return            - None

* @Note              - None
********************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
		if (EnorDi == ENABLE){
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d106      	bne.n	8000a54 <SPI_PeripheralControl+0x20>
				pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f043 0210 	orr.w	r2, r3, #16
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
		}else {
				pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
		}
}
 8000a52:	e005      	b.n	8000a60 <SPI_PeripheralControl+0x2c>
				pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f023 0210 	bic.w	r2, r3, #16
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SPI_SSOEConfig>:

* @return            - None

* @Note              - None
********************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
		if (EnorDi == ENABLE){
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d106      	bne.n	8000a8c <SPI_SSOEConfig+0x20>
				pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f043 0204 	orr.w	r2, r3, #4
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	605a      	str	r2, [r3, #4]
		}else {
				pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
		}
}
 8000a8a:	e005      	b.n	8000a98 <SPI_SSOEConfig+0x2c>
				pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f023 0204 	bic.w	r2, r3, #4
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	605a      	str	r2, [r3, #4]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <SPI_SendData>:
* @return            - None

* @Note              - Blocking API Function call will wait until all bytes are transmitted
                       also called Polling type as we are polling for the TXE flag to SET
********************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000ab0:	e024      	b.n	8000afc <SPI_SendData+0x58>
		// 1. Wait until the TxBuffer is empty (TXE is SET)
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000ab2:	bf00      	nop
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff ffa8 	bl	8000a0c <SPI_GetFlagStatus>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0f8      	beq.n	8000ab4 <SPI_SendData+0x10>

		// 2. Check DFF Bit in CR1 Register
		if((pSPIx->CR1) & (1 << SPI_CR1_DFF)){
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00b      	beq.n	8000ae6 <SPI_SendData+0x42>
			// 16 Bit Data Frame Format
			// Load the data into DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	60da      	str	r2, [r3, #12]
			Len -= 2;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b02      	subs	r3, #2
 8000adc:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	e00a      	b.n	8000afc <SPI_SendData+0x58>
		}else{
			// 8 Bit Data Frame Format
			// Load the data into DR
			pSPIx->DR = *(pTxBuffer);
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	60da      	str	r2, [r3, #12]
			Len--;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1d7      	bne.n	8000ab2 <SPI_SendData+0xe>
		}
	}
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <__libc_init_array>:
 8000b0c:	b570      	push	{r4, r5, r6, lr}
 8000b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8000b44 <__libc_init_array+0x38>)
 8000b10:	4c0d      	ldr	r4, [pc, #52]	@ (8000b48 <__libc_init_array+0x3c>)
 8000b12:	1b64      	subs	r4, r4, r5
 8000b14:	10a4      	asrs	r4, r4, #2
 8000b16:	2600      	movs	r6, #0
 8000b18:	42a6      	cmp	r6, r4
 8000b1a:	d109      	bne.n	8000b30 <__libc_init_array+0x24>
 8000b1c:	4d0b      	ldr	r5, [pc, #44]	@ (8000b4c <__libc_init_array+0x40>)
 8000b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8000b50 <__libc_init_array+0x44>)
 8000b20:	f000 f818 	bl	8000b54 <_init>
 8000b24:	1b64      	subs	r4, r4, r5
 8000b26:	10a4      	asrs	r4, r4, #2
 8000b28:	2600      	movs	r6, #0
 8000b2a:	42a6      	cmp	r6, r4
 8000b2c:	d105      	bne.n	8000b3a <__libc_init_array+0x2e>
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
 8000b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b34:	4798      	blx	r3
 8000b36:	3601      	adds	r6, #1
 8000b38:	e7ee      	b.n	8000b18 <__libc_init_array+0xc>
 8000b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b3e:	4798      	blx	r3
 8000b40:	3601      	adds	r6, #1
 8000b42:	e7f2      	b.n	8000b2a <__libc_init_array+0x1e>
 8000b44:	08000b80 	.word	0x08000b80
 8000b48:	08000b80 	.word	0x08000b80
 8000b4c:	08000b80 	.word	0x08000b80
 8000b50:	08000b84 	.word	0x08000b84

08000b54 <_init>:
 8000b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b56:	bf00      	nop
 8000b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b5a:	bc08      	pop	{r3}
 8000b5c:	469e      	mov	lr, r3
 8000b5e:	4770      	bx	lr

08000b60 <_fini>:
 8000b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b62:	bf00      	nop
 8000b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b66:	bc08      	pop	{r3}
 8000b68:	469e      	mov	lr, r3
 8000b6a:	4770      	bx	lr
